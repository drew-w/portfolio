// Generated by @wagmi/cli@1.3.0 on 6/29/2023 at 2:35:07 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RewardToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rewardTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RewardNft
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rewardNftABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'viabilityNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'payee',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'weiAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'RefundsClosed' },
  { type: 'event', anonymous: false, inputs: [], name: 'RefundsEnabled' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'viable', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Viability',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'payee',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'weiAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beneficiary',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'beneficiaryWithdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'capitalNeeded',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'capitalRaised',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'close',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'refundee', internalType: 'address', type: 'address' }],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'payee', internalType: 'address', type: 'address' }],
    name: 'depositsOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'enableRefunds',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'getUsersContractMintedTokenIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isViable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintedTokens',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum RefundEscrow.State', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'payee', internalType: 'address payable', type: 'address' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'withdrawalAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RewardDistributor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rewardDistributorABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'staker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'NftStaked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'staker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'NftUnstaked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsCollected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardsPerSecond',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsPerSecondUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'accRewardsPerShare',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'collectRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'getTokenIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalStakedTokens',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastRewardTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nft',
    outputs: [
      { name: '', internalType: 'contract IERC721Enumerable', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
    name: 'nftCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'pendingRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardsPerSecond',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardsToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stakeAllTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'stakeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'stakedBalanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakedTokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'stakedTokensOfOwner',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPendingRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unstakeAllTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'unstakeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'unstakeTokenByIndex',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'updatePool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'userInfo',
    outputs: [
      { name: 'rewardDebt', internalType: 'uint256', type: 'uint256' },
      { name: 'unpaidRewards', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__.
 */
export function useRewardTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useRewardTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useRewardTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useRewardTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"name"`.
 */
export function useRewardTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useRewardTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useRewardTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useRewardTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof rewardTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof rewardTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__.
 */
export function useRewardTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof rewardTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, TFunctionName, TMode>({
    abi: rewardTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useRewardTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof rewardTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'approve', TMode>({
    abi: rewardTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useRewardTokenBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof rewardTokenABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'burn', TMode>({
    abi: rewardTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useRewardTokenBurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof rewardTokenABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'burnFrom', TMode>({
    abi: rewardTokenABI,
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useRewardTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof rewardTokenABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'decreaseAllowance', TMode>({
    abi: rewardTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useRewardTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof rewardTokenABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'increaseAllowance', TMode>({
    abi: rewardTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useRewardTokenMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof rewardTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'mint', TMode>({
    abi: rewardTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRewardTokenRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof rewardTokenABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'renounceOwnership', TMode>({
    abi: rewardTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useRewardTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof rewardTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'transfer', TMode>({
    abi: rewardTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useRewardTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof rewardTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'transferFrom', TMode>({
    abi: rewardTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRewardTokenTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardTokenABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof rewardTokenABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof rewardTokenABI, 'transferOwnership', TMode>({
    abi: rewardTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__.
 */
export function usePrepareRewardTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareRewardTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareRewardTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareRewardTokenBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardTokenABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareRewardTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardTokenABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareRewardTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardTokenABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareRewardTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRewardTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardTokenABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareRewardTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareRewardTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRewardTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardTokenABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardTokenABI}__.
 */
export function useRewardTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rewardTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardTokenABI,
    ...config,
  } as UseContractEventConfig<typeof rewardTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useRewardTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof rewardTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRewardTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof rewardTokenABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useRewardTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof rewardTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__.
 */
export function useRewardNftRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useRewardNftBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"beneficiary"`.
 */
export function useRewardNftBeneficiary<
  TFunctionName extends 'beneficiary',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'beneficiary',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"capitalNeeded"`.
 */
export function useRewardNftCapitalNeeded<
  TFunctionName extends 'capitalNeeded',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'capitalNeeded',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"capitalRaised"`.
 */
export function useRewardNftCapitalRaised<
  TFunctionName extends 'capitalRaised',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'capitalRaised',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"depositsOf"`.
 */
export function useRewardNftDepositsOf<
  TFunctionName extends 'depositsOf',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'depositsOf',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"getApproved"`.
 */
export function useRewardNftGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"getUsersContractMintedTokenIds"`.
 */
export function useRewardNftGetUsersContractMintedTokenIds<
  TFunctionName extends 'getUsersContractMintedTokenIds',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'getUsersContractMintedTokenIds',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useRewardNftIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"isViable"`.
 */
export function useRewardNftIsViable<
  TFunctionName extends 'isViable',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'isViable',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"mintedTokens"`.
 */
export function useRewardNftMintedTokens<
  TFunctionName extends 'mintedTokens',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'mintedTokens',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"name"`.
 */
export function useRewardNftName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"owner"`.
 */
export function useRewardNftOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useRewardNftOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"state"`.
 */
export function useRewardNftState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRewardNftSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"symbol"`.
 */
export function useRewardNftSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useRewardNftTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useRewardNftTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useRewardNftTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useRewardNftTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"withdrawalAllowed"`.
 */
export function useRewardNftWithdrawalAllowed<
  TFunctionName extends 'withdrawalAllowed',
  TSelectData = ReadContractResult<typeof rewardNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardNftABI,
    functionName: 'withdrawalAllowed',
    ...config,
  } as UseContractReadConfig<typeof rewardNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__.
 */
export function useRewardNftWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof rewardNftABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, TFunctionName, TMode>({
    abi: rewardNftABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"approve"`.
 */
export function useRewardNftApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof rewardNftABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'approve', TMode>({
    abi: rewardNftABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"beneficiaryWithdraw"`.
 */
export function useRewardNftBeneficiaryWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'beneficiaryWithdraw'
        >['request']['abi'],
        'beneficiaryWithdraw',
        TMode
      > & { functionName?: 'beneficiaryWithdraw' }
    : UseContractWriteConfig<
        typeof rewardNftABI,
        'beneficiaryWithdraw',
        TMode
      > & {
        abi?: never
        functionName?: 'beneficiaryWithdraw'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'beneficiaryWithdraw', TMode>({
    abi: rewardNftABI,
    functionName: 'beneficiaryWithdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"burn"`.
 */
export function useRewardNftBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof rewardNftABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'burn', TMode>({
    abi: rewardNftABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"close"`.
 */
export function useRewardNftClose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'close'
        >['request']['abi'],
        'close',
        TMode
      > & { functionName?: 'close' }
    : UseContractWriteConfig<typeof rewardNftABI, 'close', TMode> & {
        abi?: never
        functionName?: 'close'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'close', TMode>({
    abi: rewardNftABI,
    functionName: 'close',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"deposit"`.
 */
export function useRewardNftDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<typeof rewardNftABI, 'deposit', TMode> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'deposit', TMode>({
    abi: rewardNftABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"enableRefunds"`.
 */
export function useRewardNftEnableRefunds<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'enableRefunds'
        >['request']['abi'],
        'enableRefunds',
        TMode
      > & { functionName?: 'enableRefunds' }
    : UseContractWriteConfig<typeof rewardNftABI, 'enableRefunds', TMode> & {
        abi?: never
        functionName?: 'enableRefunds'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'enableRefunds', TMode>({
    abi: rewardNftABI,
    functionName: 'enableRefunds',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useRewardNftOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof rewardNftABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'onERC721Received', TMode>({
    abi: rewardNftABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRewardNftRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof rewardNftABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'renounceOwnership', TMode>({
    abi: rewardNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function useRewardNftSafeMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'safeMint'
        >['request']['abi'],
        'safeMint',
        TMode
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<typeof rewardNftABI, 'safeMint', TMode> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'safeMint', TMode>({
    abi: rewardNftABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useRewardNftSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof rewardNftABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'safeTransferFrom', TMode>({
    abi: rewardNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useRewardNftSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof rewardNftABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'setApprovalForAll', TMode>({
    abi: rewardNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useRewardNftTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof rewardNftABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'transferFrom', TMode>({
    abi: rewardNftABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRewardNftTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof rewardNftABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'transferOwnership', TMode>({
    abi: rewardNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"withdraw"`.
 */
export function useRewardNftWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardNftABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof rewardNftABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof rewardNftABI, 'withdraw', TMode>({
    abi: rewardNftABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__.
 */
export function usePrepareRewardNftWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareRewardNftApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"beneficiaryWithdraw"`.
 */
export function usePrepareRewardNftBeneficiaryWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'beneficiaryWithdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'beneficiaryWithdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardNftABI,
    'beneficiaryWithdraw'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareRewardNftBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"close"`.
 */
export function usePrepareRewardNftClose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'close'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'close',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'close'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareRewardNftDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"enableRefunds"`.
 */
export function usePrepareRewardNftEnableRefunds(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'enableRefunds'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'enableRefunds',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'enableRefunds'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareRewardNftOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRewardNftRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareRewardNftSafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareRewardNftSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareRewardNftSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareRewardNftTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRewardNftTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardNftABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareRewardNftWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardNftABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardNftABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardNftABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__.
 */
export function useRewardNftEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"Approval"`.
 */
export function useRewardNftApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useRewardNftApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"Deposited"`.
 */
export function useRewardNftDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRewardNftOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"RefundsClosed"`.
 */
export function useRewardNftRefundsClosedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'RefundsClosed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'RefundsClosed',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'RefundsClosed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"RefundsEnabled"`.
 */
export function useRewardNftRefundsEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'RefundsEnabled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'RefundsEnabled',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'RefundsEnabled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"Transfer"`.
 */
export function useRewardNftTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"Viability"`.
 */
export function useRewardNftViabilityEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'Viability'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'Viability',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'Viability'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardNftABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useRewardNftWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardNftABI, 'Withdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardNftABI,
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof rewardNftABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__.
 */
export function useRewardDistributorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"accRewardsPerShare"`.
 */
export function useRewardDistributorAccRewardsPerShare<
  TFunctionName extends 'accRewardsPerShare',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'accRewardsPerShare',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"getTokenIndex"`.
 */
export function useRewardDistributorGetTokenIndex<
  TFunctionName extends 'getTokenIndex',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'getTokenIndex',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"getTotalStakedTokens"`.
 */
export function useRewardDistributorGetTotalStakedTokens<
  TFunctionName extends 'getTotalStakedTokens',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'getTotalStakedTokens',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"lastRewardTime"`.
 */
export function useRewardDistributorLastRewardTime<
  TFunctionName extends 'lastRewardTime',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'lastRewardTime',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"nft"`.
 */
export function useRewardDistributorNft<
  TFunctionName extends 'nft',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'nft',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"nftCount"`.
 */
export function useRewardDistributorNftCount<
  TFunctionName extends 'nftCount',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'nftCount',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"owner"`.
 */
export function useRewardDistributorOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"paused"`.
 */
export function useRewardDistributorPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"pendingRewards"`.
 */
export function useRewardDistributorPendingRewards<
  TFunctionName extends 'pendingRewards',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'pendingRewards',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useRewardDistributorProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"rewardsPerSecond"`.
 */
export function useRewardDistributorRewardsPerSecond<
  TFunctionName extends 'rewardsPerSecond',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'rewardsPerSecond',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"rewardsToken"`.
 */
export function useRewardDistributorRewardsToken<
  TFunctionName extends 'rewardsToken',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'rewardsToken',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"stakedBalanceOf"`.
 */
export function useRewardDistributorStakedBalanceOf<
  TFunctionName extends 'stakedBalanceOf',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'stakedBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"stakedTokenOfOwnerByIndex"`.
 */
export function useRewardDistributorStakedTokenOfOwnerByIndex<
  TFunctionName extends 'stakedTokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'stakedTokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"stakedTokensOfOwner"`.
 */
export function useRewardDistributorStakedTokensOfOwner<
  TFunctionName extends 'stakedTokensOfOwner',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'stakedTokensOfOwner',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"totalPendingRewards"`.
 */
export function useRewardDistributorTotalPendingRewards<
  TFunctionName extends 'totalPendingRewards',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'totalPendingRewards',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"userInfo"`.
 */
export function useRewardDistributorUserInfo<
  TFunctionName extends 'userInfo',
  TSelectData = ReadContractResult<typeof rewardDistributorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof rewardDistributorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: rewardDistributorABI,
    functionName: 'userInfo',
    ...config,
  } as UseContractReadConfig<
    typeof rewardDistributorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__.
 */
export function useRewardDistributorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, TFunctionName, TMode>({
    abi: rewardDistributorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"collectRewards"`.
 */
export function useRewardDistributorCollectRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'collectRewards'
        >['request']['abi'],
        'collectRewards',
        TMode
      > & { functionName?: 'collectRewards' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'collectRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'collectRewards'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'collectRewards', TMode>(
    {
      abi: rewardDistributorABI,
      functionName: 'collectRewards',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useRewardDistributorOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'onERC721Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    typeof rewardDistributorABI,
    'onERC721Received',
    TMode
  >({
    abi: rewardDistributorABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"pause"`.
 */
export function useRewardDistributorPause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'pause'
        >['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof rewardDistributorABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'pause', TMode>({
    abi: rewardDistributorABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRewardDistributorRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof rewardDistributorABI,
    'renounceOwnership',
    TMode
  >({
    abi: rewardDistributorABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"stakeAllTokens"`.
 */
export function useRewardDistributorStakeAllTokens<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'stakeAllTokens'
        >['request']['abi'],
        'stakeAllTokens',
        TMode
      > & { functionName?: 'stakeAllTokens' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'stakeAllTokens',
        TMode
      > & {
        abi?: never
        functionName?: 'stakeAllTokens'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'stakeAllTokens', TMode>(
    {
      abi: rewardDistributorABI,
      functionName: 'stakeAllTokens',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"stakeToken"`.
 */
export function useRewardDistributorStakeToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'stakeToken'
        >['request']['abi'],
        'stakeToken',
        TMode
      > & { functionName?: 'stakeToken' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'stakeToken',
        TMode
      > & {
        abi?: never
        functionName?: 'stakeToken'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'stakeToken', TMode>({
    abi: rewardDistributorABI,
    functionName: 'stakeToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRewardDistributorTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof rewardDistributorABI,
    'transferOwnership',
    TMode
  >({
    abi: rewardDistributorABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unpause"`.
 */
export function useRewardDistributorUnpause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof rewardDistributorABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'unpause', TMode>({
    abi: rewardDistributorABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unstakeAllTokens"`.
 */
export function useRewardDistributorUnstakeAllTokens<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'unstakeAllTokens'
        >['request']['abi'],
        'unstakeAllTokens',
        TMode
      > & { functionName?: 'unstakeAllTokens' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'unstakeAllTokens',
        TMode
      > & {
        abi?: never
        functionName?: 'unstakeAllTokens'
      } = {} as any,
) {
  return useContractWrite<
    typeof rewardDistributorABI,
    'unstakeAllTokens',
    TMode
  >({
    abi: rewardDistributorABI,
    functionName: 'unstakeAllTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unstakeToken"`.
 */
export function useRewardDistributorUnstakeToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'unstakeToken'
        >['request']['abi'],
        'unstakeToken',
        TMode
      > & { functionName?: 'unstakeToken' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'unstakeToken',
        TMode
      > & {
        abi?: never
        functionName?: 'unstakeToken'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'unstakeToken', TMode>({
    abi: rewardDistributorABI,
    functionName: 'unstakeToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unstakeTokenByIndex"`.
 */
export function useRewardDistributorUnstakeTokenByIndex<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'unstakeTokenByIndex'
        >['request']['abi'],
        'unstakeTokenByIndex',
        TMode
      > & { functionName?: 'unstakeTokenByIndex' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'unstakeTokenByIndex',
        TMode
      > & {
        abi?: never
        functionName?: 'unstakeTokenByIndex'
      } = {} as any,
) {
  return useContractWrite<
    typeof rewardDistributorABI,
    'unstakeTokenByIndex',
    TMode
  >({
    abi: rewardDistributorABI,
    functionName: 'unstakeTokenByIndex',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"updatePool"`.
 */
export function useRewardDistributorUpdatePool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'updatePool'
        >['request']['abi'],
        'updatePool',
        TMode
      > & { functionName?: 'updatePool' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'updatePool',
        TMode
      > & {
        abi?: never
        functionName?: 'updatePool'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'updatePool', TMode>({
    abi: rewardDistributorABI,
    functionName: 'updatePool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useRewardDistributorUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof rewardDistributorABI, 'upgradeTo', TMode>({
    abi: rewardDistributorABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useRewardDistributorUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rewardDistributorABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof rewardDistributorABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof rewardDistributorABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: rewardDistributorABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__.
 */
export function usePrepareRewardDistributorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardDistributorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"collectRewards"`.
 */
export function usePrepareRewardDistributorCollectRewards(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'collectRewards'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'collectRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'collectRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareRewardDistributorOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareRewardDistributorPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRewardDistributorRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"stakeAllTokens"`.
 */
export function usePrepareRewardDistributorStakeAllTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'stakeAllTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'stakeAllTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'stakeAllTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"stakeToken"`.
 */
export function usePrepareRewardDistributorStakeToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'stakeToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'stakeToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'stakeToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRewardDistributorTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareRewardDistributorUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unstakeAllTokens"`.
 */
export function usePrepareRewardDistributorUnstakeAllTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'unstakeAllTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'unstakeAllTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'unstakeAllTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unstakeToken"`.
 */
export function usePrepareRewardDistributorUnstakeToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'unstakeToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'unstakeToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'unstakeToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"unstakeTokenByIndex"`.
 */
export function usePrepareRewardDistributorUnstakeTokenByIndex(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'unstakeTokenByIndex'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'unstakeTokenByIndex',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'unstakeTokenByIndex'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"updatePool"`.
 */
export function usePrepareRewardDistributorUpdatePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'updatePool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'updatePool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'updatePool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareRewardDistributorUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rewardDistributorABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rewardDistributorABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareRewardDistributorUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rewardDistributorABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: rewardDistributorABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rewardDistributorABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__.
 */
export function useRewardDistributorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useRewardDistributorAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useRewardDistributorBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRewardDistributorInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"NftStaked"`.
 */
export function useRewardDistributorNftStakedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'NftStaked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'NftStaked',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'NftStaked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"NftUnstaked"`.
 */
export function useRewardDistributorNftUnstakedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'NftUnstaked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'NftUnstaked',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'NftUnstaked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRewardDistributorOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof rewardDistributorABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"Paused"`.
 */
export function useRewardDistributorPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"RewardsCollected"`.
 */
export function useRewardDistributorRewardsCollectedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'RewardsCollected'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'RewardsCollected',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'RewardsCollected'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"RewardsPerSecondUpdated"`.
 */
export function useRewardDistributorRewardsPerSecondUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof rewardDistributorABI,
      'RewardsPerSecondUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'RewardsPerSecondUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof rewardDistributorABI,
    'RewardsPerSecondUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useRewardDistributorUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rewardDistributorABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useRewardDistributorUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof rewardDistributorABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: rewardDistributorABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof rewardDistributorABI, 'Upgraded'>)
}
