import Head from 'next/head'
import { ConnectButton } from '@rainbow-me/rainbowkit'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import {
  useRewardTokenBalanceOf,
  useRewardDistributorPendingRewards,
  useRewardNftBalanceOf,
  useRewardDistributorStakedBalanceOf,
  usePrepareRewardNftSafeMint,
  useRewardNftSafeMint,
  usePrepareRewardDistributorStakeAllTokens,
  useRewardDistributorStakeAllTokens,
  usePrepareRewardNftSetApprovalForAll,
  useRewardNftSetApprovalForAll,
  useRewardDistributorCollectRewards,
  usePrepareRewardDistributorCollectRewards,
  useRewardDistributorUnstakeAllTokens,
  usePrepareRewardDistributorUnstakeAllTokens
} from '@/src/generated'
import { useAccount } from 'wagmi'

const inter = Inter({ subsets: ['latin'] })

enum contractAddress {
  RewardToken = '0x9B7Aa964f4Eb862EdE5b1C9a14A400534dd2DD95',
  Nft = '0xED32089936765F5d2d195f2e96dE381569B951ec',
  RewardDistributor = '0x60a315f4BB7F0ed10edBBD83a752C27fcb31Bf99'
}

export default function Home () {
  const account = useAccount()

  const { data: tokenBalance } = useRewardTokenBalanceOf({
    enabled: account?.isConnected,
    address: contractAddress.RewardToken,
    args: [account.address!]
  })

  const {
    data: pendingRewards,
    error,
    isError
  } = useRewardDistributorPendingRewards({
    enabled: account?.isConnected,
    address: contractAddress.RewardDistributor,
    args: [account.address!],
    watch: true
  })
  console.log(error)
  const { data: nftBalance } = useRewardNftBalanceOf({
    enabled: account?.isConnected,
    address: contractAddress.Nft,
    args: [account.address!]
  })

  const { data: stakedBalance } = useRewardDistributorStakedBalanceOf({
    enabled: account?.isConnected,
    address: contractAddress.RewardDistributor,
    args: [account.address!]
  })

  const safeMintPrep = usePrepareRewardNftSafeMint({
    enabled: account?.isConnected,
    address: contractAddress.Nft,
    args: [account.address!]
  })

  const safeMintMutation = useRewardNftSafeMint(safeMintPrep.config)

  const stakeNftPrep = usePrepareRewardDistributorStakeAllTokens({
    enabled: account?.isConnected,
    address: contractAddress.RewardDistributor
  })

  const stakeNftMutation = useRewardDistributorStakeAllTokens(
    stakeNftPrep.config
  )

  const unstakeNftPrep = usePrepareRewardDistributorUnstakeAllTokens({
    enabled: account?.isConnected,
    address: contractAddress.RewardDistributor
  })

  const unstakeNftMutation = useRewardDistributorUnstakeAllTokens(
    unstakeNftPrep.config
  )

  const approveStakePrep = usePrepareRewardNftSetApprovalForAll({
    enabled: account?.isConnected,
    address: contractAddress.Nft,
    args: [contractAddress.RewardDistributor, true]
  })

  const approveStakeMutation = useRewardNftSetApprovalForAll(
    approveStakePrep.config
  )

  const collectPrep = usePrepareRewardDistributorCollectRewards({
    enabled: account?.isConnected,
    address: contractAddress.RewardDistributor
  })

  const collectMutation = useRewardDistributorCollectRewards(collectPrep.config)

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.center}>
          <ConnectButton />
          <span className={styles.row}>
            <div className={styles.card}>
              <h2>Balance:</h2>
              <p>{tokenBalance?.toString()}</p>
            </div>

            <div className={styles.card}>
              <h2>NFTs:</h2>
              <p>{nftBalance?.toString()}</p>
              <button
                disabled={!safeMintMutation.write}
                onClick={safeMintMutation.write}
              >
                MINT
              </button>
            </div>

            <div className={styles.card}>
              <h2>Staked Nfts:</h2>
              <p>{stakedBalance?.toString()}</p>
              <button
                disabled={!approveStakeMutation.write}
                onClick={approveStakeMutation.write}
              >
                approve
              </button>
              <button
                disabled={!stakeNftMutation.write}
                onClick={stakeNftMutation.write}
              >
                STAKE
              </button>
              <button
                disabled={!unstakeNftMutation.write}
                onClick={unstakeNftMutation.write}
              >
                unSTAKE
              </button>
            </div>

            <div className={styles.card}>
              <h2>Rewards:</h2>
              <p>{pendingRewards?.toString()}</p>
              <button
                disabled={!collectMutation.write}
                onClick={collectMutation.write}
              >
                COLLECT
              </button>
            </div>
          </span>

          <span>
            <div></div>
          </span>
        </div>
      </main>
    </>
  )
}
